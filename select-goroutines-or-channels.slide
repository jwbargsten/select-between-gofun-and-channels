# You have to select between goroutines & channels
July 2021
Tags: go golang xebia

Joachim Bargsten
Software Engineer, Xebia
jbargsten@xebia.com
https://bargsten.org
https://github.com/jwbargsten

## Setup

* [These slides & code](https://github.com/jwbargsten/select-goroutines-or-channels)
* [Tour of go](https://tour.golang.org/welcome/1)
* [Playground](https://play.golang.org/)

## What the fuzz is about

go enables a different way to think about concurrency (and parallelism).

[Why are map operations not defined to be atomic?](https://golang.org/doc/faq#atomic_maps)

So what can we use, then?

* goroutines
* sync/mutex stuff

* channels
* for-select-loops

* diagnostics

Building blocks are simple, but sufficient to build everything you need.

## The concurrency & parallelism toolbox

## goroutines

Goroutines run in the same address space, so access to shared memory must be
synchronized. The sync package provides useful primitives, although you won't
need them much in Go as there are other primitives. 

.play -edit goroutine1/goroutine1.go /START/,/END/

Like sending a task to background in the shell: `make_coffe &`

[Effective go](https://golang.org/doc/effective_go#goroutines)

## more goroutines

You can create ~1mio on 4gb machine. **Advice from Marc: keep it at around 10k**

.play -edit goroutine2/goroutine2.go /START/,/END/

* CPU-intensive tasks -> `#goroutines == ncores`
* IO-intensive tasks -> `#goroutines == like Marc said`

## channels

flow control, messaging & synchronisation in go

* inspired by Hoareâ€™s Communicating Sequential Processes
* potentially harmful (more about this later)

.play -edit channel/channel.go /START/,/END/

Like the pipe operator in the shell: `make_coffee | drink_coffee`

## for-select-loop

`loop` runs in its own goroutine.

`select` lets `loop` avoid blocking indefinitely in any one state.

.code for_select_loop/for_select_loop.txt

The cases interact via local state in `loop`.

[Source](https://talks.golang.org/2013/advconc.slide#24)

## Select on nil

Sends and receives on nil channels block.

Select never selects a blocking case.

.play -edit select_nil/select_nil.go /START/,/END/

## the challenge: closing channels

You cannot check if a read channel is closed without reading from it.

Either you will

* eventually read the "true" value from it (`v <- c`)
* read the "true" value and "not closed" indicator (`v, ok <- c`)
* read a zero value and the "closed" indicator (`v, ok <- c`)
* will block in the channel read forever (`v <- c`)

Only the last one technically doesn't read from the channel, but that's of little use.

[Source](https://stackoverflow.com/questions/16105325/how-to-check-a-channel-is-closed-or-not-without-reading-it)


## Channelsalat

.image abb/kabelsalat.png _ 600

go-equivalent of "Kabelsalat" would be "Channelsalat": think first, then act.

## channel advice

* no channels in APIs -> *use callbacks*
* if you are new to go, you'll overuse channels
* channels use mutexes under the hood, mutex is faster
* synchronize access to shared memory -> *use mutex*
* if you think it can be done with a mutex -> *use mutex*
* closing channels is hard, zombie go functions the reality
* don't send nil into channels
* [channels are involved more frequently involved in bugs](https://songlh.github.io/paper/go-study.pdf)
* [go context](https://pkg.go.dev/golang.org/x/net/context) might be useful

[Source](https://news.ycombinator.com/item?id=11211112)

## You can shoot yourself in the foot with go, but it might tell you about it.

## Deadlock detection

.play -edit deadlock/deadlock.go /SNIPPETSTART/,/SNIPPETEND/

[Source](https://talks.golang.org/2013/advconc.slide#7)

## Race condition detection (1)

.play -edit race/race.go /SNIPPETSTART/,/SNIPPETEND/

    go run -race race/race.go

## Race condition detection (2)

.code race/race.out

## How to wait for stuff

.play -edit wait/wait.go /START/,/END/ HLsync

## How to better wait for stuff

.play -edit waitwg/waitwg.go /START/,/END/

[Source](https://stackoverflow.com/questions/18207772/how-to-wait-for-all-goroutines-to-finish-without-using-time-sleep)

## service & reply channels

You can create a channel that transports channels

    chan chan error

For request-response stuff? I'm still figuring out when this comes handy...

[random StackOverflow post](https://stackoverflow.com/questions/27236827/idiomatic-way-to-make-a-request-response-communication-using-channels)

## Challenge: Web Crawler

[Exercise: Web Crawler](https://tour.golang.org/concurrency/10)

* perhaps as "newbie" misleading, because it leads away from idiomatic go?

## Resources

* [go - What are channels used for? - Stack Overflow](https://stackoverflow.com/questions/39826692/what-are-channels-used-for)
* [Understading Go Channels](https://github.com/gophercon/2017-talks/raw/master/KavyaJoshi-UnderstandingChannels/Kavya%20Joshi%20-%20Understanding%20Channels.pdf)
* [Using and understanding Go](https://golang.org/doc/#learning)
* [Advanced Go Concurrency Patterns](https://talks.golang.org/2013/advconc.slide#1)
* [Idiomatic Go Tricks](https://go-talks.appspot.com/github.com/matryer/present/idiomatic-go-tricks/main.slide#1)
* [Deep Dive into Golang Performance - Granulate](https://granulate.io/deep-dive-into-golang-performance/)
* [Go: Work-Stealing in Go Scheduler](https://medium.com/a-journey-with-go/go-work-stealing-in-go-scheduler-d439231be64d)
* [Go by Example](https://gobyexample.com/)
